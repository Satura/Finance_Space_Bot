import time

import telebot
import func
from telebot import types
from constant import telegram_token

bot = telebot.TeleBot(telegram_token)
amount = 0
locations = []
news_index = 0
keyword_news_index = 0
all_kw_news = []
base_cur = ''
cur_list = []

@bot.message_handler(commands=['start'])
def main(message):
    ''' –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º '''
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    menu_btn1 = types.KeyboardButton('–í—Å—è–∫–æ-—Ä–∞–∑–Ω–æ')
    menu_btn2 = types.KeyboardButton('–ö–æ—Å–º–æ')
    reply_markup.add(menu_btn1, menu_btn2)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.\n'
                                      '–ë–æ—Ç —É–º–µ–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä—ã –æ—Ç –¶–ë –†–§, '
                                      '–ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Å–æ–≤–µ—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–æ–µ–∑–Ω–æ—Å—Ç—è–º–∏, '
                                      '–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, '
                                      '–∞ —Ç–∞–∫ –∂–µ —á—Ç–æ-—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –Ω–∞ —Ç–µ–º—É –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏', reply_markup=reply_markup)


@bot.message_handler(commands=['converter'])
def converter(message):
    ''' –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º '''
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
    bot.register_next_step_handler(message, go_convert)


@bot.message_handler(commands=['fin_wisdom'])
def fin_wisdom(message):
    ''' –°–≤–æ–¥–∫–∞ —Å –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—è–º–∏ '''
    advice = func.fin_advice()
    adv = str(advice[0])
    descr = str(advice[1])
    markup = types.InlineKeyboardMarkup(row_width=2)
    url_btn1 = types.InlineKeyboardButton('FincultInfo', url='https://fincult.info')
    url_btn2 = types.InlineKeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ-–ñ—É—Ä–Ω–∞–ª', url='https://journal.tinkoff.ru')
    url_btn3 = types.InlineKeyboardButton('InvestFuture', url='https://investfuture.ru')
    url_btn4 = types.InlineKeyboardButton('SMART-LAB', url='https://smart-lab.ru')
    markup.add(url_btn1, url_btn2, url_btn3, url_btn4)
    bot.send_message(message.chat.id, f'''üí∏ *{adv}*\n{descr}
\nüëõ*–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:* 
_FincultInfo_ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–æ—Å–≤–µ—Ç–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¶–ë –†–§. –ï–≥–æ —Ü–µ–ª—å ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã –≥—Ä–∞–∂–¥–∞–Ω.
_–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ñ—É—Ä–Ω–∞–ª_ ‚Äî –∏–∑–¥–∞–Ω–∏–µ –ø—Ä–æ –¥–µ–Ω—å–≥–∏ –∏ –∂–∏–∑–Ω—å
_InvestFuture_. Digital-media –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö
_SMART-LAB_. –ú—ã –¥–µ–ª–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∏—Ä–∂–µ''', reply_markup=markup, parse_mode="Markdown")


@bot.message_handler(commands=['space_news'])
def space_news(message):
    """ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ "–ù–æ–≤–æ—Å—Ç–∏ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏" –≤—ã–±–æ—Ä –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —à–∞–≥–∞"""
    # TODO: —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ "–ø–æ—Ä—Ü–∏–∏" –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–ª –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É "–•–≤–∞—Ç–∏—Ç"
    global news_index
    output = ''
    markup = types.InlineKeyboardMarkup()
    more_btn = types.InlineKeyboardButton('–ë–æ–ª—å—à–µ', callback_data='more_news')
    exit_btn = types.InlineKeyboardButton('–•–≤–∞—Ç–∏—Ç', callback_data='exit_news')
    markup.add(more_btn, exit_btn)

    all_news = func.space_news_all()
    for i in range(news_index, news_index + 6):
        try:
            output += all_news[i]
        except IndexError:
            output += '–î–∞–ª—å—à–µ —Å–æ–≤—Å–µ–º —É–∂–µ –Ω–µ –Ω–æ–≤–æ—Å—Ç–∏'
            break
    bot.send_message(message.chat.id, output, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(commands=['space_news_keyword'])
def space_news_keyword(message):
    """ –ó–∞–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π """
    bot.send_message(message.chat.id, '–û —á–µ–º –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏?')
    bot.register_next_step_handler(message, search_in_news)


@bot.message_handler(commands=['get_weather'])
def weather(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
    bot.register_next_step_handler(message, get_weather)


@bot.message_handler()
def navigate(message):
    """ –°–≤–æ–¥–∫–∞ –∏ –Ω–∞–≤–≥–∞—Ü–∏—è –ø–æ "—Ä–∞–∑–¥–µ–ª–∞–º" –¥–µ–Ω—å–≥–∏/–∫–æ—Å–º–æ—Å """
    markup = types.InlineKeyboardMarkup()
    some_btn1 = types.InlineKeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç', callback_data='converter')
    some_btn2 = types.InlineKeyboardButton('–§–∏–Ω. –º—É–¥—Ä–æ—Å—Ç—å', callback_data='fin_wisdom')
    some_btn3 = types.InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', callback_data='weather')
    cosmo_btn1 = types.InlineKeyboardButton('–°–µ–π—á–∞—Å –Ω–∞ –æ—Ä–±–∏—Ç–µ', callback_data='orbit')
    cosmo_btn2 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏', callback_data='space_news')
    cosmo_btn3 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É', callback_data='space_news_keyword')

    if message.text == '–í—Å—è–∫–æ-—Ä–∞–∑–Ω–æ':
        # –°–≤–æ–¥–∫–∞ –æ—Ç –¶–ë, –¥–∞–ª—å–Ω–µ–π—à–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è 
        brief = func.fin_info()
        markup.add(some_btn1, some_btn2)
        markup.add(some_btn3)
        bot.send_message(message.chat.id, brief, reply_markup=markup)

    if message.text == '–ö–æ—Å–º–æ':
        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–µ, –¥–∞–ª—å–Ω–µ–π—à–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        brief = (f'{func.launch()}\n'
                 f'\n--- –ü–æ–≥–æ–¥–∞ –Ω–∞ –∫–æ—Å–º–æ–¥—Ä–æ–º–∞—Ö ---\n'
                 f'\n–ë–∞–π–∫–æ–Ω—É—Ä: \n{func.weather("–ë–∞–π–∫–æ–Ω—É—Ä")}\n'
                 f'\n–í–æ—Å—Ç–æ—á–Ω—ã–π: \n{func.weather("–í–æ—Å—Ç–æ—á–Ω—ã–π")}\n'
                 )
        markup.add(cosmo_btn1, cosmo_btn2)
        markup.add(cosmo_btn3)
        bot.send_message(message.chat.id, brief, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ Inline-–∫–Ω–æ–ø–∫–∞–º
    if callback.data == 'fin_wisdom':
        fin_wisdom(callback.message)

    if callback.data == 'converter':
        converter(callback.message)

    if callback.data == 'weather':
        weather(callback.message)

    if callback.data == 'orbit':
        bot.send_message(callback.message.chat.id, func.in_orbit(), parse_mode='Markdown')

    if callback.data == 'space_news':
        space_news(callback.message)

    if callback.data == 'space_news_keyword':
        space_news_keyword(callback.message)

    global news_index, keyword_news_index

    if callback.data == 'more_news':
        news_index += 5
        space_news(callback.message)

    if callback.data == 'exit_news':
        news_index = 0
        bot.send_message(callback.message.chat.id, 'ok')

    if callback.data == 'more_kw_news':
        keyword_news_index += 3
        print_3_kw_news(callback.message)

    if callback.data == 'exit_kw_news':
        keyword_news_index = 0
        bot.send_message(callback.message.chat.id, 'ok')


def search_in_news(message):
    """ –ò—â–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å–ª–æ–≤—É """
    global all_kw_news
    keyword = message.text.strip()
    all_kw_news = func.space_news2(keyword)
    if len(all_kw_news) == 0:
        bot.send_message(message.chat.id, '–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –æ–± —ç—Ç–æ–º')
    else:
        print_3_kw_news(message)


def print_3_kw_news(message):
    global all_kw_news, keyword_news_index
    # TODO: —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ "–ø–æ—Ä—Ü–∏–∏" –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–ª –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É "–•–≤–∞—Ç–∏—Ç"
    output = ''
    markup = types.InlineKeyboardMarkup()
    more_btn = types.InlineKeyboardButton('–ë–æ–ª—å—à–µ', callback_data='more_kw_news')
    exit_btn = types.InlineKeyboardButton('–•–≤–∞—Ç–∏—Ç', callback_data='exit_kw_news')
    markup.add(more_btn, exit_btn)

    for i in range(keyword_news_index, keyword_news_index + 3):
        try:
            output += all_kw_news[i]
        except IndexError:
            output += '–î–∞–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–≤—Å–µ–º –Ω–µ —Å–≤–µ–∂–∏–µ –∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å\n'
            break

    bot.send_message(message.chat.id, output, reply_markup=markup, parse_mode='Markdown')


def go_convert(message):
    """ –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å """
    global amount
    try:
        amount = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, go_convert)

    if amount > 0:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ: "<–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞> <–≤–∞–ª—é—Ç–∞1>,<–≤–∞–ª—é—Ç–∞2>,...<–≤–∞–ª—é—Ç–∞N>"')
        bot.register_next_step_handler(message, take_currency)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, go_convert)


def take_currency(message):
    """ –†–∞–∑–±–∏—Ä–∞–µ—Ç –∫–∞–∫–∏–µ –ø–∞—Ä—ã –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç """
    global base_cur, cur_list

    currencies = message.text.upper().split(" ", 1)
    if len(currencies) >= 2:
        base_cur = currencies[0]
        cur_list = currencies[1].replace(" ", "").split(',')

    else:
        bot.send_message(message.chat.id, f'–ó–∞–±—ã–ª–∏ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É. –í–≤–µ–¥–∏—Ç–µ  –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≥–æ (–±–∞–∑–æ–≤–∞—è-–ø—Ä–æ–±–µ–ª-—Ü–µ–ª–µ–≤—ã–µ(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)))')
        bot.register_next_step_handler(message, take_currency)
        return
    try:
        result = func.new_converter(amount, base_cur, cur_list)
        bot.send_message(message.chat.id, result, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n{e}\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É –≤–∞–ª—é—Ç')
        bot.register_next_step_handler(message, take_currency)


def get_weather(message):
    """ –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–≥–æ–¥—É (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º) """

    name = message.text
    global locations  # , lon, lat
    locations = func.search_loc(name)

    if len(locations) == 1:
        lon, lat = locations[0]['GeoObject']['Point']['pos'].split()
        bot.send_message(message.chat.id, func.get_weather_coord(lon, lat), parse_mode='Markdown')
    #
    if len(locations) > 1:
        all_locs = ''
        for l in range(len(locations)):
            all_locs += f"{l} - {locations[l]['GeoObject']['metaDataProperty']['GeocoderMetaData']['Address']['formatted']}\n"

        bot.send_message(message.chat.id, f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. '
                                          f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ–∫–∞—Ü–∏–∏: \n{all_locs}')
        bot.register_next_step_handler(message, choose_location)


def choose_location(message):
    """ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É """
    global locations  # , lon, lat
    num = int(message.text)
    lon, lat = locations[num]['GeoObject']['Point']['pos'].split()
    bot.send_message(message.chat.id, func.get_weather_coord(lon, lat), parse_mode='Markdown')


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(f'There is an error: {e} at {time.time()}')


# bot.polling(none_stop=True)
